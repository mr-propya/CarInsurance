# -*- coding: utf-8 -*-
"""CarDamage.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NZfu7FslJdFkdtvJX4YIyzcaND6cOCRn
"""

# Run this cell to mount your Google Drive.

import numpy as np
import os,cv2


DATASET='drive/My Drive/Dataset/'
CATEGORIES=['front_major','front_minor','front_moderate','rear_major','rear_minor','rear_moderate','side_major','side_minor','side_moderate','whole']
IMG_SIZE=100

train_data=[]

def create_training_data():
  for select in CATEGORIES:
    path=os.path.join(DATASET,select)
    index=CATEGORIES.index(select)
    for img in os.listdir(path):
      try:
        img_array=cv2.imread(os.path.join(path,img),cv2.IMREAD_GRAYSCALE)
        img_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
        train_data.append([img_array,index])
      except Exception as e:
        pass
    print(index)


create_training_data()
print('Done!')

import random
random.shuffle(train_data)

features=[]
labels=[]

for feature,label in train_data:
  features.append(feature/255)
  labels.append(label)


features=np.array(features).reshape(-1,IMG_SIZE,IMG_SIZE,1)


import pickle
pickle_out=open('Features.pickle','wb')
pickle.dump(features,pickle_out)
pickle_out.close()


pickle_out=open('Labels.pickle','wb')
pickle.dump(labels,pickle_out)
pickle_out.close()

print(features.shape[1:])

import tensorflow as tf
import time
from tensorflow import keras
from tensorflow.keras.callbacks import TensorBoard

NAME='Car-Damage-Model-{}/'.format(int(time.time()))

tensorboard=TensorBoard(log_dir=('logs/{}'.format(NAME)).replace("/",'\\'))



pickle_in=open('Features.pickle','rb')
features=pickle.load(pickle_in)
pickle_in.close()

pickle_in=open('Labels.pickle','rb')
labels=pickle.load(pickle_in)
pickle_in.close()


model=keras.Sequential()
model.add(keras.layers.Conv2D(64,(3,3),input_shape=features.shape[1:]))
model.add(keras.layers.Activation('relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(64,(3,3)))
model.add(keras.layers.Activation('relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Conv2D(64,(3,3)))
model.add(keras.layers.Activation('relu'))
model.add(keras.layers.MaxPooling2D(pool_size=(2,2)))

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(64))
model.add(keras.layers.Activation('relu'))


model.add(keras.layers.Dense(10))
model.add(keras.layers.Activation('softmax'))


model.compile(optimizer='adam',loss='sparse_categorical_crossentropy',metrics=['accuracy'])

model.fit(features,labels,batch_size=16,epochs=20,validation_split=0.1,callbacks=[tensorboard])

print()
test_loss, test_acc = model.evaluate(features[500:510], labels[500:510])
print('\nTest accuracy:', test_acc)

model.save('CarsModel.h5')

# from google.colab import files
# files.download("CarsModel.h5")

# PREDICT

import numpy as np
import tensorflow as tf
from tensorflow import keras
import matplotlib.pyplot as plt
import pickle
import cv2

model=keras.models.load_model('CarsModel.h5')

damage=['front_major','front_minor','front_moderate','rear_major','rear_minor','rear_moderate','side_major','side_minor','side_moderate','whole']





def convert_image(image):
    IMG_SIZE=100
    img_array=[]
    try:
        img_array=cv2.imread(image,cv2.IMREAD_GRAYSCALE)
        img_array=cv2.resize(img_array,(IMG_SIZE,IMG_SIZE))
    except:
        pass
    return img_array




test_image=convert_image('maxresdefault.jpg')
#print(test_image)

test_imageX = (np.expand_dims(test_image/255,0))
test_imageX=np.array(test_imageX).reshape(-1,100,100,1)
#print(test_imageX.shape)
prediction = model.predict(test_imageX)
# print(prediction)

result=damage[int(np.argmax(prediction[0]))]

# print(prediction[0][0])
print(result)
#cv2.imshow(result,test_image)